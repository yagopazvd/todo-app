{"version":3,"sources":["TodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","todo","handleSubmit","e","preventDefault","newTodo","Object","objectSpread","_this","id","uuid","props","addTodo","setState","handleChange","defineProperty","target","name","value","react_default","a","createElement","className","onSubmit","this","htmlFor","type","onChange","placeholder","onClick","Component","Todo","isDone","isEditing","removeTodo","remove","toggleEdit","s","toggleDone","editTodo","edit","key","class","TodoList","todos","add","concat","toConsumableArray","filter","updatedTodos","map","_this2","src_Todo_0","update","src_TodoForm_0","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.382aad47.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport uuid from 'uuid/v4'\r\nimport './TodoForm.css'\r\n\r\n\r\nclass TodoForm extends Component {\r\n    state = { \r\n        todo:\"\"\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        const newTodo = {...this.state, id: uuid()}\r\n        this.props.addTodo(newTodo)\r\n        this.setState({\r\n            todo:'',\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n    render() { \r\n        return ( \r\n            <form className=\"TodoForm\" onSubmit={this.handleSubmit}>\r\n                <label htmlFor=\"todo\"></label>\r\n                <input \r\n                type=\"text\"\r\n                id=\"todo\" \r\n                name=\"todo\" \r\n                value={this.state.todo}\r\n                onChange={this.handleChange}\r\n                placeholder=\" New todo\"\r\n                />\r\n                <i onClick={this.handleSubmit} className=\"fas fa-plus\"></i>\r\n            </form>\r\n         );\r\n    }\r\n}\r\n \r\nexport default TodoForm;","import React, { Component } from 'react';\r\nimport './Todo.css';\r\n\r\n\r\nclass Todo extends Component {\r\n    state = {\r\n        isDone: false,\r\n        isEditing: false,\r\n        todo: this.props.todo\r\n    }\r\n\r\n    removeTodo = () => {\r\n    this.props.remove(this.props.id)\r\n    }\r\n        \r\n    toggleEdit = (e) => {\r\n        this.setState(s => ({\r\n            isEditing: !s.isEditing\r\n        }))\r\n    }\r\n\r\n    toggleDone = (e) => {\r\n        this.setState(s => ({\r\n            isDone: !s.isDone\r\n        }))\r\n    }\r\n\r\n    editTodo = (e) =>{\r\n    e.preventDefault();\r\n    this.props.edit(this.props.id, this.state.todo)\r\n    \r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    render() { \r\n        let result;\r\n        if(this.state.isEditing){\r\n\r\n           result = ( \r\n           <div className=\"Todo\">\r\n                <form onSubmit={this.editTodo}>\r\n                    <input \r\n                    type=\"todo\"\r\n                    value={this.state.todo}\r\n                    name=\"todo\"\r\n                    onChange={this.handleChange}\r\n                    />\r\n                    </form>\r\n                    <div className=\"Todo-btns\">\r\n                        <i onClick={this.toggleEdit} className=\"fas fa-pencil-alt\"></i>\r\n                    </div>\r\n                \r\n            </div> )\r\n\r\n        } else if(this.state.isDone){\r\n\r\n            result = (\r\n                <div className=\"Todo\" key={this.props.id} >\r\n                <p onClick={this.toggleDone}><s>{this.state.todo}</s></p>\r\n                <div className=\"Todo-btns\">\r\n                    <i onClick={this.toggleEdit} className=\"fas fa-pencil-alt\"></i>\r\n                    <i onClick={this.removeTodo} class=\"fas fa-trash\"></i>\r\n                </div>\r\n            </div> )\r\n\r\n        } else {\r\n\r\n            result = (\r\n                <div className=\"Todo\" key={this.props.id} >\r\n                <p onClick={this.toggleDone}>{this.state.todo}</p>\r\n                <div className=\"Todo-btns\">\r\n                    <i onClick={this.toggleEdit} className=\"fas fa-pencil-alt\"></i>\r\n                    <i onClick={this.removeTodo} class=\"fas fa-trash\"></i>\r\n                </div>\r\n            </div> )\r\n\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n \r\nexport default Todo;","import React, { Component } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\nimport './TodoList.css';\r\n\r\n\r\nclass TodoList extends Component {\r\n    state = { todos: [] }\r\n\r\n    add = (todo) => {\r\n        this.setState({\r\n            todos: [...this.state.todos, todo]\r\n        })\r\n    }\r\n\r\n    remove = (id) => {\r\n        this.setState({\r\n            todos: this.state.todos.filter(todo => todo.id !== id)\r\n        })\r\n    }\r\n\r\n    edit = (id, newTodo) => {\r\n        const updatedTodos = this.state.todos.map(todo =>{\r\n            if(todo.id === id){\r\n                return {...todo, todo: newTodo}\r\n            }\r\n\r\n            return todo;\r\n        }) \r\n\r\n        this.setState({todos:updatedTodos})\r\n    }\r\n\r\n    render() { \r\n        let todos = this.state.todos.map(todo => (\r\n            <Todo \r\n            id={todo.id} \r\n            key={todo.id} \r\n            todo={todo.todo} \r\n            update={this.update}\r\n            remove={this.remove} \r\n            edit={this.edit}  \r\n            />\r\n        ))\r\n        return ( \r\n            <div className=\"TodoList\">\r\n                <h1 className=\"TodoList-title\">A React Todo App<span className=\"TodoList-span\">Exercise on Callback funcitons, forms and state</span></h1>\r\n                {todos}\r\n                <TodoForm addTodo={this.add}/>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default TodoList;","import React from 'react';\nimport TodoList from './TodoList';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}